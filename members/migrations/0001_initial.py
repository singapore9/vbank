# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2017-11-06 20:33
from __future__ import unicode_literals

import custom_auth.models
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import members.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_confirmed', models.BooleanField(default=False, help_text='Designates whether this user confirm his account.', verbose_name='confirmed')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 256 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=256, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('middle_name', models.CharField(blank=True, max_length=30, verbose_name='middle name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('birthday', models.DateField()),
                ('residence_address', models.CharField(blank=True, max_length=255, verbose_name='residence address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.PositiveIntegerField(choices=[(8, 'Manager'), (1, 'Driver'), (0, 'OUT_OF_ROLE')], default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'member',
            },
            bases=(custom_auth.models.PasswordTokenMixin, custom_auth.models.SendMessageMixin, models.Model),
            managers=[
                ('objects', members.models.MemberManager()),
                ('clients', members.models.ClientsManager()),
                ('managers', members.models.ManagersManager()),
            ],
        ),
    ]
